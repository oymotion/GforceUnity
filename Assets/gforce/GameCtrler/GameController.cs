///////////////////////////////////////////////////////////
//  GameController.cs
//  Implementation of the Class GameController
//  Generated by Enterprise Architect
//  Created on:      02-2月-2021 16:07:33
//  Original author: hebin
///////////////////////////////////////////////////////////


namespace GameCtrler
{
	public enum DataSource : int
	{

		DATA_SRC_HID_AXES = 0,
		DATA_SRC_HID_BTN = 1,
		DATA_SRC_IMU = 128,
		DATA_SRC_GESTURE = 129,
		DATA_SRC_RAW_ADC = 130,
		DATA_SRC_EMG = 131
	}//end DataSource

	public enum SubDataSource : int
	{
		IMU_YAW = 0,
		IMU_ROLL = 1,
		IMU_PITCH = 2,
		ADC_CH0 = 0,
		ADC_CH1 = 1,
		ADC_CH2 = 2,
		ADC_CH3 = 3,
		ADC_CH4 = 4,
		ADC_CH5 = 5,
		ADC_CH6 = 6,
		ADC_CH7 = 7
	}

	public enum InputId : int
	{

		INPUT_AXIS_X = 128,
		INPUT_AXIS_Y = 129,
		INPUT_AXIS_Z = 130,
		INPUT_BTN_A = 0,
		INPUT_BTN_B = 1,
		INPUT_BTN_C = 2,
		INPUT_BTN_D = 3,
		INPUT_BTN_E = 4,
		INPUT_BTN_F = 5,
		INPUT_BTN_G = 6,
		INPUT_BTN_H = 7

	}//end InputId

	public enum ControllerState : int
	{

		STATE_DISCONNECTED = 0,
		STATE_CONNECTING = 1,
		STATE_CONNECTED = 2,
		STATE_DISCONNECTING = 3,
		STATE_READY = 4

	}//end ControllerState

	
	/// <summary>
	/// 接口类
	/// </summary>
	public interface IGameController {

        float GetQuaternionX();

        float GetQuaternionY();

        float GetQuaternionZ();

        float GetQuaternionW();

		string GetName();

		ControllerState GetStatus();

		void Tick();

	}//end GameController

}//end namespace GameCtrler